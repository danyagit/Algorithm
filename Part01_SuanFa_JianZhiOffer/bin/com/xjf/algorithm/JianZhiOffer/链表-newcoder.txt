6 逆序打印链表，用栈就好了。stack.add();stack.pop();
18.1 在 O(1) 时间内删除链表节点
本题只需要注意两个点：是否只有一个元素、待删除的点是否为尾节点。
18.2 删除链表中重复的结点
要注意的是，重复节点连本身都要删除，用到while循环。（有一定难度）
22. 链表中倒数第 K 个结点
快慢指针。找链表中间元素也是快慢指针
23. 链表中环的入口结点
方法一：空间换时间：用HashSet
方法二：时间换空间，作者推出来：
快指针速度为慢指针的两倍，直到二者相遇。
将其中一个指针重新挪到起点。
俩指针以速度1继续前行，相遇点为所求。
24. 反转链表。（leetcode02）
递归除了一眼看出来的题目，其他都用递归好理解一些。
这种需要同时用到多个节点的链表问题，设计递归函数的时候参数里面带两个更好理解
25. 合并两个排序的链表（leetcode03）
递归：以哪个为开头，没必要写那么多情况讨论，递归体里面写就行。
	如何做：比较节点-->保留小的节点-->构建该节点的下一个节点（调用函数构建）-->返回
	这道题体现了：写出代码简单，写出简洁的代码难。自己之前写的太麻烦
暴力：取出来放到list，排序，重新构建
35. 复杂链表的复制
就采用一个空间换时间的方法：
用HashMap存放原链表，key为节点，value为位置（0开始）；
用ArrayList存放新链表。
52. 两个链表的第一个公共结点
方法一：不考虑空间：HashSet
方法二：考虑空间：两个指针同时跑，跑到尾部后从另一条链头部开始跑。

